package ch.hftm.service;

import ch.hftm.data.Album;
import ch.hftm.data.Image;
import com.jayway.jsonpath.JsonPath;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.*;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;


@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
@Slf4j
class ImageServiceTest {


    private static final File jsonFile = new File(System.getProperty("images-json", "src/test/resources/storage/images.json"));
    ImageService imageService = new ImageService();
    AlbumService albumService = new AlbumService();


    @BeforeAll
    static void setup() {
        System.setProperty("images-json", "src/test/resources/storage/images.json");
        System.setProperty("albums-json", "src/test/resources/storage/albums.json");
        try {
            Files.deleteIfExists(Path.of("src/test/resources/storage/images.json"));
            Files.deleteIfExists(Path.of("src/test/resources/storage/albums.json"));
        } catch (IOException e) {
            log.error("Could not delete test images file:{} {}", jsonFile.toPath(), e.getMessage());
        }
    }

    @Test
    @Order(1)
    void createImage() throws IOException {
        Album newAlbum = albumService.createAlbum("Test", "Test Album");
        imageService.createImage(new File("src/test/resources/DSCN0012.jpg"), newAlbum);
        imageService.createImage(new File("src/test/resources/DSCN0021.jpg"), newAlbum);
        imageService.createImage(new File("src/test/resources/DSCN0010.jpg"), newAlbum);

        String json = Files.readString(ImageServiceTest.jsonFile.toPath(), StandardCharsets.UTF_8);
        // read json file which was generated by createAlbum and check if the values match
        assertEquals(3, (Integer) JsonPath.read(json, "$.length()"));
        assertEquals("DSCN0012.jpg", JsonPath.read(json, "$.[0].fileName"));
        assertEquals(newAlbum.getId(), JsonPath.read(json, "$.[0].albumId"));
    }


    @Test
    @Order(2)
    void getImagesForAlbum() {
        List<Image> vacationImages = imageService.getImagesForAlbum(albumService.getAlbumByName("Test"));
        assertEquals(3, vacationImages.size());
    }

    @Test
    @Order(5)
    void deleteImage() {
        int sizeBefore = imageService.getAllImages().size();
        Image imageToDelete = imageService.getImageByFileName("DSCN0012.jpg");
        imageService.deleteImage(imageToDelete);
        int sizeAfter = imageService.getAllImages().size();
        assertEquals(sizeBefore - 1, sizeAfter);
    }

    @Test
    @Order(4)
    void getImageByFileName() {
        Image image = imageService.getImageByFileName("DSCN0012.jpg");
        assertEquals("DSCN0012.jpg", image.getFileName());
        assertEquals("jpg", image.getFileExtension());
    }

    @Test
    @Order(5)
    void getImageByFileNameNotFound() {
        Image image = imageService.getImageByFileName("testxyz.jpg");
        assertEquals(null, image);
    }
}