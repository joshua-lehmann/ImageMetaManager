package ch.hftm.service;

import ch.hftm.data.Album;
import com.jayway.jsonpath.JsonPath;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.*;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

@Slf4j
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class AlbumServiceTest {

    AlbumService albumService = new AlbumService();
    private static final File jsonFile = new File(System.getProperty("albums-json", "src/test/resources/storage/albums.json"));

    @BeforeAll

    static void setup() {
        System.setProperty("images-json", "src/test/resources/storage/images.json");
        System.setProperty("albums-json", "src/test/resources/storage/albums.json");
        try {
            Files.deleteIfExists(Path.of("src/test/resources/storage/images.json"));
            Files.deleteIfExists(Path.of("src/test/resources/storage/albums.json"));
        } catch (IOException e) {
            log.error("Could not delete test albums file:{} {}", jsonFile.toPath(), e.getMessage());
        }
    }


    @Test
    @Order(1)
    void createTestData() {
        albumService.createTestData();
        assertEquals(2, albumService.getAllAlbums().size());
    }

    @Test
    @Order(2)
    void createAlbum() throws IOException {

        Album testAlbum = new Album("Vacation", "Vacation Album");
        albumService.createAlbum("Vacation", "Vacation Album");

        String json = Files.readString(AlbumServiceTest.jsonFile.toPath(), StandardCharsets.UTF_8);
        // read json file which was generated by createAlbum and check if the values match
        assertEquals(testAlbum.getName(), JsonPath.read(json, "$[2].name"));
        assertEquals(testAlbum.getDescription(), JsonPath.read(json, "$[2].description"));
    }

    @Test
    @Order(3)
    void deleteAlbum() {
        Album deletedAlbum = albumService.deleteAlbum(albumService.getAlbumByName("Vacation"));
        assertEquals("Vacation", deletedAlbum.getName());
        assertEquals(2, albumService.getAllAlbums().size());
    }

    @Test
    @Order(4)
    void getAlbumByNameNotFound() {
        Album deletedAlbum = albumService.getAlbumByName("xyz");
        assertNull(deletedAlbum);
    }
}